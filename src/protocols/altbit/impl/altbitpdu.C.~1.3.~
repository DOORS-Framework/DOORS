// Editor-info: -*- C++ -*-

//  Copyright 2000 
//  	Telecoms Lab, Tampere University of Technology.  All rights reserved.

//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY TAMPERE UNIVERSITY OF TECHNOLOGY AND 
//  CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
//  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
//  FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY 
//  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS

//===========================================================================
//File:     altbitpdu.C
//Date:     13.3.2003
//Desc:     Alternating bit PDU decoder and encoder functions
//Author:   Ilkka Karvinen, TTY/DMI
//===========================================================================

/*
$Log: altbitpdu.C,v $
Revision 1.3  2004/02/01 23:15:30  bilhanan
bugfixes, cvs diff for details on individual files.

Revision 1.2  2003/08/24 22:28:29  bilhanan
#include "..." -> #include <doors/...>

Revision 1.1  2003/07/02 14:37:27  ik
Moved to protocol section.

Revision 1.1  2003/07/02 11:27:52  ik
Initial revision.

*/

#include <doors/udp.h>
#include <doors/altbitpdu.h>

// Include some implementations 
#include <doors/altbitpdu.i>

Uint16
AltbitPeer :: DATA :: decode (Message* msg)
{
  // UdpSAP::Dtind provides the whole UDP PDU in its 'data' attribute
  Frame frame = ((UdpSAP::Dtind *) msg)->data;

  // The second octet contains the altbit (0 or 1)
  altbit = frame.read(1) == 0 ? false : true;

  // The third octet contains the data
  payload = frame.read(2);

  // Set address to the source address
  addr = ((UdpSAP::Dtind *) msg)->source;

  return 3; // Frame length
}

Message*
AltbitPeer :: DATA :: encode (void)
{
  // Create a new udp packet to dtreq message
  UdpSAP::Dtreq *dtreq = new UdpSAP::Dtreq;

  // Add frame type first (Data)
  dtreq->data.putLast('D');

  // The second octet is altbit
  dtreq->data.putLast(altbit);

  // The last octet is the data
  dtreq->data.putLast(payload);

  // Set the destination address
  dtreq->dest = addr;

  return dtreq;
}

Uint16
AltbitPeer :: ACK :: decode (Message* msg)
{
  // UdpSAP::Dtind provides the whole UDP PDU in its 'data' attribute
  Frame frame = ((UdpSAP::Dtind *) msg)->data;

  // The second octet contains the altbit (0 or 1)
  altbit = frame.read(1) == 0 ? false : true;

  // Set address to the source address
  addr = ((UdpSAP::Dtind *) msg)->source;

  return 2; // Frame length
}

Message*
AltbitPeer :: ACK :: encode (void)
{
  // Create a new udp packet to dtreq message
  UdpSAP::Dtreq *dtreq = new UdpSAP::Dtreq;

  // Add frame type first (Acknowledge)
  dtreq->data.putLast('A');

  // The second octet is altbit
  dtreq->data.putLast(altbit);

  // Set the destination address
  dtreq->dest = addr;

  return dtreq;
}

// Identifies the received PDU
Sint16 
AltbitPeer :: identify (Message *msg) 
{
  // Return the PDU type according to the first octet
  switch (((UdpSAP::Dtind *) msg)->data.read(0)) {
  case 'A' :
    return ack;
  case 'D' :
    return data;
  }
  
  return other;
}



