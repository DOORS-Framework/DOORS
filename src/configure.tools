AC_PREREQ([2.50])

# Process this file with autoconf to produce a configure script.

# Set version information to AC_INIT, _version, _patchlevel, _sublevel
# and AM_INIT_AUTOMAKE

AC_INIT(DOORS, 0.5.0, bilhanan@cs.tut.fi)

AC_CONFIG_SRCDIR([base/base.C])
AM_CONFIG_HEADER(doorsconf.h)
AM_INIT_AUTOMAKE(DOORS, 0.5.0)

# Subdirectories to compile in any case. The others are dependend 
# on the libraries to be found in the tests after this.
ROOTSUBS='base tools protocols corba apps'
BASESUBS='dev hsi ptb sys util'
TOOLSSUBS='tpt'
CORBASUBS=
APPSUBS=udp
AC_SUBST(ROOTSUBS)
AC_SUBST(BASESUBS)
AC_SUBST(TOOLSSUBS
AC_SUBST(CORBASUBS)
AC_SUBST(APPSUBS)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
#AC_PROG_RANLIB

AM_PROG_LIBTOOL

dnl gethostbyname is sometimes in libnsl
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname))

dnl getsockopt is sometimes in libsocket
AC_CHECK_FUNC(getsockopt, , AC_CHECK_LIB(socket, getsockopt))

dnl Check for the west
AC_MSG_CHECKING([whether the west is the best])
AC_MSG_RESULT([yes])

dnl Check for SLP library
AC_CHECK_HEADER([slp.h])
AC_CHECK_FUNC(SLPOpen, , AC_CHECK_LIB(slp, SLPOpen))
_slpfound=no
if test x"${ac_cv_func_SLPOpen}" != xno || test x"${ac_cv_lib_slp_SLPOpen}" != xno; then
  if test x"${ac_cv_header_slp_h}" != xno; then
    _slpfound=yes
  fi
fi
if test x"${_slpfound}" != xno; then
  AC_DEFINE(HAVE_SLP, 1)
else
  AC_MSG_WARN([SLP library not found. Not building modules depending on it.])
  AC_DEFINE(HAVE_SLP, 0)
fi

dnl LDAP-library
_ldapfound=no
AC_CHECK_HEADER([ldap.h])
AC_CHECK_FUNC(ldap_init, , AC_CHECK_LIB(ldap, ldap_init))
if test x"${ac_cv_func_ldap_init}" = xyes || test x"${ac_cv_lib_ldap_ldap_init}" = xyes; then
  # Fine but if you are unhappy, you use OpenLDAP; check for extra libs
  AC_CHECK_FUNC(ber_free, , AC_CHECK_LIB(lber, ber_free))
  if test x"${ac_cv_header_ldap_h}" != xno; then
    _ldapfound=yes
  fi
fi

if test x"${_ldapfound}" != xyes; then
  AC_MSG_WARN([LDAP library not found. Not building modules depending on it.])
fi

_cxxflags="$CXXFLAGS"
_ldflags="$LDFLAGS"
AC_MSG_CHECKING([for compiler type])
_compiler=
if test -z "$GXX"; then
	case $host in 
	sparc-sun-solaris*)
		AC_MSG_RESULT([Sun CC])
		_compiler=suncc
		CXXFLAGS="-xO3 -template=wholeclass,extdef -library=Crun,Cstd -instances=static"
                if test X"$enable_profile" = Xyes; then
			CXXFLAGS="-xpg -g -template=wholeclass,extdef -library=Crun,Cstd -instances=static"
  		fi
                if test X"$enable_debug" = Xyes; then
			CXXFLAGS="-g -template=wholeclass,extdef -library=Crun,Cstd -instances=static"
  		fi
		;;
	*)
		AC_MSG_RESULT([unknown])
		_compiler=unknown
		CXXFLAGS="-O"
                if test X"$enable_profile" = Xyes; then
			CXXFLAGS="-g -p"
  		fi
                if test X"$enable_debug" = Xyes; then
			CXXFLAGS="-g"
  		fi
		;;
        esac
else
	AC_MSG_RESULT([g++])
	_compiler=gxx
	CXXFLAGS="-O2 -pipe"
	if test X"$enable_profile" = Xyes; then
		CXXFLAGS="-g -p -pipe"
  	fi
	if test X"$enable_debug" = Xyes; then
		CXXFLAGS="-g -pipe"
  	fi
fi
#CXXFLAGS="$CXXFLAGS $_cxxflags"
LDFLAGS="$LDFLAGS $_ldflags"

dnl Check for SDL, rt is needed by SDL in some OS's
SDLLIBS=
_rtlib=
AC_CHECK_LIB(rt, sem_init, _rtlib="-lrt")
_libs=${LIBS}
_sdlfound=yes
LIBS="${LIBS} ${_rtlib}"
AC_CHECK_LIB(SDL, SDL_Init, SDLLIBS="-lSDL ${_rtlib}", _sdlfound=no)
LIBS=${_libs}
AC_SUBST(SDLLIBS)
if test x"${_sdlfound}" != xno; then
  AC_DEFINE(HAVE_SDL, 1)
  AM_CONDITIONAL(HAVE_SDL, true)
else
  AC_DEFINE(HAVE_SDL, 0)
  AM_CONDITIONAL(HAVE_SDL, false)
fi

dnl Guess audio system
_audiofound=no

dnl Check for libossaudio which is used by some BSD systems
_libs=${LIBS}
OSSAUDIO=
AC_CHECK_LIB(ossaudio,_oss_ioctl,[OSSAUDIO="-lossaudio"])
AC_SUBST(OSSAUDIO)
LIBS=${_libs}

dnl e.g. FreeBSD-OSS
if test x"${_audiofound}" != "xyes"; then
AC_CHECK_HEADER(machine/soundcard.h,[
  AC_MSG_CHECKING([whether OSS-audio source compiles])
  AC_TRY_COMPILE([
#include <stdio.h>
#include <unistd.h>
#include <machine/soundcard.h>
],[
ioctl(0, SNDCTL_DSP_GETBLKSIZE, NULL);],[
AC_DEFINE(HAVE_MACHINE_SOUNDCARD_H)
AC_MSG_RESULT([yes])
_audiofound=yes],
AC_MSG_RESULT([no]))
])
fi

dnl Linux-OSS
if test x"${_audiofound}" != "xyes"; then
AC_CHECK_HEADER(linux/soundcard.h,[
  AC_MSG_CHECKING([whether OSS-audio source compiles])
  AC_TRY_COMPILE([
#include <stdio.h>
#include <unistd.h>
#include <linux/soundcard.h>
],[
ioctl(0, SNDCTL_DSP_GETBLKSIZE, NULL);],[
AC_DEFINE(HAVE_LINUX_SOUNDCARD_H)
AC_MSG_RESULT([yes])
_audiofound=yes],
AC_MSG_RESULT([no]))
])
fi

dnl e.g. OpenBSD-OSS
if test x"${_audiofound}" != "xyes"; then
AC_CHECK_HEADER(soundcard.h,[
  AC_MSG_CHECKING([whether OSS-audio source compiles])
  AC_TRY_COMPILE([
#include <stdio.h>
#include <unistd.h>
#include <soundcard.h>
],[
ioctl(0, SNDCTL_DSP_GETBLKSIZE, NULL);],[
AC_DEFINE(HAVE_SOUNDCARD_H)
AC_MSG_RESULT([yes])
_audiofound=yes],
AC_MSG_RESULT([no]))
])
fi

dnl Sun-audio
if test x"${_audiofound}" != "xyes"; then
AC_CHECK_HEADER(sys/audioio.h,[
  AC_MSG_CHECKING([whether Sun-audio source compiles])
  AC_TRY_COMPILE([
#include <stdio.h>
#include <sys/audioio.h>
#include <unistd.h>
],[
ioctl(0, AUDIO_DRAIN, NULL);],[
AC_DEFINE(HAVE_SYS_AUDIOIO_H)
AC_MSG_RESULT([yes])
_audiofound=yes],
AC_MSG_RESULT([no]))
])
fi

if test x"${_audiofound}" != "xyes"; then
  AC_MSG_WARN([no known audio system found; audio is disabled in demos])
fi

# If lame library and working audio exists, compile rtp app
if test x"${_audiofound}" != xno && test x"${_lamefound}" != xno; then
  APPSUBS="${APPSUBS} rtp"
fi

dnl Check for Lame-library
dnl Because libraries '-lmp3lame -lm' are only needed in mp3_demo, create
dnl LAMELIBS-variable that includes all the needed libraries
LAMELIBS=
LAMEINCS=
_lamefound=no
AC_ARG_WITH(lame,
[  --with-lame=DIR         compile with Lame mp3 library [default=no]],
[
 lame_library="$withval"
 case "$lame_library" in
 no)
  AC_DEFINE(_CF_WITH_LAME,0)
  ;;
 yes)
  _libs=${LIBS}
  LIBS="${LIBS} -lm"
  AC_CHECK_LIB(mp3lame,lame_decode_init)
  if test x"${ac_cv_lib_mp3lame_lame_encode}" = xno; then
     AC_MSG_ERROR(libmp3lame not found)
  fi
  _lamefound=yes
  LAMELIBS="-lmp3lame -lm"
  AC_DEFINE(_CF_WITH_LAME,1)
  LIBS=${_libs}
  ;;
 *)
  _libs=${LIBS}
  _cflags=${CFLAGS}
  LIBS="${LIBS} -L${lame_library}/lib -lmp3lame -lm"
  CFLAGS="${CFLAGS} -I${lame_library}/include"
  AC_CHECK_LIB(mp3lame,lame_decode_init)
  if test x"${ac_cv_lib_mp3lame_lame_encode}" = xno; then
     AC_MSG_ERROR(libmp3lame not found)
  fi
  _lamefound=yes
  LAMELIBS="-L${lame_library}/lib -lmp3lame -lm"
  LAMEINCS="-I${lame_library}/include"
  AC_DEFINE(_CF_WITH_LAME,1)
  LIBS=${_libs}
  CFLAGS=${_cflags}
  ;;
 esac
],[AC_DEFINE(_CF_WITH_LAME,0)])
AM_CONDITIONAL(_CF_WITH_LAME, test x"${with_lame-no}" != xno)
AC_SUBST(LAMELIBS)
AC_SUBST(LAMEINCS)

dnl Check for Mico
dnl Because Mico is only needed in some parts of DOORS, create
dnl MICOLIBS and MICOINCS variables for them
dnl NOTE: Because Mico will be temporary stuff here no checking is done!
AC_ARG_WITH(mico-version,
[  --with-mico-version=VER set Mico version [default=2.3.5]],
[mico_version="$withval"],[mico_version="2.3.5"])
MICOLIBS=
MICOINCS=
IDL=
AC_ARG_WITH(mico,
[  --with-mico=DIR         compile with Mico [default=no]],
[
 mico_library="$withval"
 case "$mico_library" in
 no)
  AC_DEFINE(_CF_WITH_MICO,0)
  ;;
 yes)
  MICOLIBS="-lmico${mico_version}"
  AC_DEFINE(_CF_WITH_MICO,1)
  AC_CHECK_PROG(IDL,idl,idl)
  ;;
 *)
  MICOINCS="-I${mico_library}/include"
  MICOLIBS="-L${mico_library}/lib -lmico${mico_version}"
  AC_DEFINE(_CF_WITH_MICO,1)
  _path=${PATH}
  PATH=${mico_library}/bin
  AC_CHECK_PROG(IDL,idl,${mico_library}/bin/idl)
  PATH=${_path}
  ;;
 esac
],[AC_DEFINE(_CF_WITH_MICO,0)])
AC_SUBST(MICOLIBS)
AC_SUBST(MICOINCS)
AC_SUBST(IDL)

_micofound=no
if test x"${MICOLIBS}" != x"" && test x"${MICOINCS}" != x"" && test x"${IDL}" != x""; then
  _micofound=yes
fi

dnl Set the Mico make flag according to previous findings
AM_CONDITIONAL(_CF_WITH_MICO, test x"${_micofound}" != xno)

AC_ARG_ENABLE(demon,[  --enable-demon          compile DEMON [default=no]],
[
 case "$enableval" in
  no)
  ;;
  yes)
   ROOTSUBS="${ROOTSUBS} demon"
  ;;
 esac
]
)

dnl Check for --enable-debug
AC_ARG_ENABLE(debug,[  --enable-debug          turn on debugging compiler flags [default=no]])

dnl Check for --enable-profile
AC_ARG_ENABLE(profile,[  --enable-profile        turn on profiling compiler flags [default=no]])

dnl Check for --enable-debugmsg
AC_ARG_ENABLE(debugmsg,[  --enable-debugmsg       turn on printing of debugging messages at runtime [default=no]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_DEBUG,0)
  ;;
  yes)
   AC_DEFINE(_CF_DEBUG,1)
  ;;
 esac
],[AC_DEFINE(_CF_DEBUG,0)])

dnl Check for --enable-optimising
AC_ARG_ENABLE(optimising,[  --enable-optimising     compile optimised code [default=no]])

dnl Check for --enable-trace
AC_ARG_ENABLE(trace,[  --enable-trace          turn on user interface tracing [default=yes]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_TRACE,0)
  ;;
  yes)
   AC_DEFINE(_CF_TRACE,1)
  ;;
 esac
],[AC_DEFINE(_CF_TRACE,1)])

dnl Check for --enable-fault
AC_ARG_ENABLE(fault,[  --enable-fault          turn on library internal fault checking [default=yes]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_FAULT,0)
  ;;
  yes)
   AC_DEFINE(_CF_FAULT,1)
  ;;
 esac
],[AC_DEFINE(_CF_FAULT,1)])

dnl Check for --enable-programs
_compile_daemons=no
AC_ARG_ENABLE(daemons,[  --enable-daemons       build the CORBA daemons [default=yes]],
[
 case "$enableval" in
  no)
  ;;
  yes)
   _compile_daemons=yes
  ;;
 esac
],[_compile_daemons=yes])

dnl Check for --enable-final
AC_ARG_ENABLE(final,[  --enable-final          build size optimised libraries [default=no]],
[
 case "$enableval" in
  no)
   AC_DEFINE(WITH_FINAL,0)
  ;;
  yes)
   AC_DEFINE(WITH_FINAL,1)
  ;;
 esac
],[AC_DEFINE(WITH_FINAL,0)])

dnl Check for --enable-error
AC_ARG_ENABLE(error,[  --enable-error          turn on library user use error checking [default=yes]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_ERROR,0)
  ;;
  yes)
   AC_DEFINE(_CF_ERROR,1)
  ;;
 esac
],[AC_DEFINE(_CF_ERROR,1)])

dnl Check for --enable-mem
AC_ARG_ENABLE(mem,[  --enable-mem            turn on memory manager in library building [default=yes]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_MEM,0)
  ;;
  yes)
   BASESUBS="${BASESUBS} mem"
   AC_DEFINE(_CF_MEM,1)
 esac
],[
BASESUBS="${BASESUBS} mem"
AC_DEFINE(_CF_MEM,1)
])

dnl Check for --enable-explicit
AC_ARG_ENABLE(explicit,[  --enable-explicit       turn on use of explicit templates [default=no]],
[
 case "$enableval" in
  no)
   AC_DEFINE(_CF_EXPLICIT_TEMPLATE,0)
  ;;
  yes)
   AC_DEFINE(_CF_EXPLICIT_TEMPLATE,1)
 esac
],[AC_DEFINE(_CF_EXPLICIT_TEMPLATE,0)])

# If Mico, SLP and LDAP were found, compile applications that use them
if test x"${_micofound}" != xno && test x"${_ldapfound}" != xno && test x"${_slpfound}" != xno; then
  CORBASUBS=library
  if test x"${_compile_daemons}" != xno; then
    CORBASUBS="${CORBASUBS} daemons"
  fi
  APPSUBS="${APPSUBS} browser chatservice"
fi

dnl Enable use of flags in Makefile.am files
AM_CONDITIONAL(_CF_PROFILE, test x"$enable_profile" = xyes)
AM_CONDITIONAL(_CF_DEBUG, test x"$enable_debugmsg" = xyes)
AM_CONDITIONAL(_CF_TRACE, test x"$enable_trace" = xyes)
AM_CONDITIONAL(_CF_FAULT, test x"$enable_fault" = xyes)
AM_CONDITIONAL(_CF_ERROR, test x"$enable_error" = xyes)
AM_CONDITIONAL(_CF_MEM, test x"$enable_mem" = xyes)
AM_CONDITIONAL(_CF_EXPLICIT_TEMPLATE, test x"$enable_explicit" = xyes)
AM_CONDITIONAL(WITH_FINAL, test x"$enable_final" = xyes)
AM_CONDITIONAL(WITH_AVSTREAMS, test x"$_slpfound" != xno && test x"$_sdlfound" != xno)

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/file.h sys/ioctl.h sys/socket.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_PROG_MAKE_SET
AC_FUNC_ERROR_AT_LINE
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([getcwd gethostbyaddr gethostbyname gethostname gettimeofday inet_ntoa memset select socket sqrt strchr strerror strstr])


AC_CONFIG_FILES([Makefile
                 base/Makefile
                 base/mem/Makefile
                 base/hsi/Makefile
                 base/sys/Makefile
                 base/ptb/Makefile
                 base/dev/Makefile
                 base/util/Makefile
		 tools/tpt/Makefile
		 protocols/Makefile
		 protocols/rtcp/Makefile
		 protocols/rtcp/rtcp/Makefile
		 protocols/rtcp/rtcp_r/Makefile
		 protocols/rtp/Makefile
		 protocols/rtp/rtp/Makefile
		 protocols/rtp/rtp_r/Makefile
		 protocols/udp/Makefile
                 corba/Makefile
                 corba/library/Makefile
                 corba/library/orb/Makefile
                 corba/library/propertyservice/Makefile
                 corba/library/namingservice/Makefile
                 corba/daemons/Makefile
                 apps/Makefile
                 apps/browser/Makefile
                 apps/chatservice/Makefile
                 apps/rtp/Makefile
                 apps/udp/Makefile
                 demon/Makefile
                 demon/library/Makefile
                 demon/program/Makefile])

AC_OUTPUT
